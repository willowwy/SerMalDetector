import { FilePath } from "../misc/util";
import { Function, Program } from "@babel/types";
export declare class PackageInfo {
    readonly name: string;
    readonly version: string | undefined;
    readonly main: string | undefined;
    readonly dir: FilePath;
    readonly isEntry: boolean;
    readonly modules: Map<string, ModuleInfo>;
    readonly directDependencies: Set<PackageInfo>;
    constructor(name: string, version: string | undefined, main: string | undefined, dir: FilePath, isEntry: boolean);
    toString(): string;
}
export declare function normalizeModuleName(s: string): string;
export declare class ModuleInfo {
    readonly relativePath: string;
    readonly packageInfo: PackageInfo;
    readonly isEntry: boolean;
    readonly isIncluded: boolean;
    readonly functions: Set<FunctionInfo>;
    node: Program | undefined;
    readonly hash: number;
    constructor(relativePath: string, packageInfo: PackageInfo, isEntry: boolean, isIncluded: boolean);
    toString(): string;
    getPath(): FilePath;
    getOfficialName(): string;
}
export declare class DummyModuleInfo {
    readonly requireName: string;
    readonly normalizedRequireName: string;
    constructor(requireName: string);
    toString(): string;
    getOfficialName(): string;
}
export declare class FunctionInfo {
    readonly name: string | undefined;
    readonly node: Function;
    readonly moduleInfo: ModuleInfo;
    readonly functions: Set<FunctionInfo>;
    get packageInfo(): PackageInfo;
    constructor(name: string | undefined, node: Function, moduleInfo: ModuleInfo);
    toString(): string;
}
