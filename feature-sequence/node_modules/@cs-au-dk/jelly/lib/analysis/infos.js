"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FunctionInfo = exports.DummyModuleInfo = exports.ModuleInfo = exports.normalizeModuleName = exports.PackageInfo = void 0;
const util_1 = require("../misc/util");
const path_1 = require("path");
const assert_1 = __importDefault(require("assert"));
class PackageInfo {
    name;
    version;
    main;
    dir;
    isEntry;
    modules = new Map;
    directDependencies = new Set;
    constructor(name, version, main, dir, isEntry) {
        this.name = name;
        this.version = version;
        this.main = main;
        this.dir = dir;
        this.isEntry = isEntry;
    }
    toString() {
        return `${this.name}${this.version ? `@${this.version}` : ""}`;
    }
}
exports.PackageInfo = PackageInfo;
function normalizeModuleName(s) {
    return s.endsWith("/index.js") ? s.substring(0, s.length - 9) :
        s.endsWith(".js") ? s.substring(0, s.length - 3) :
            s.endsWith(".mjs") ? s.substring(0, s.length - 4) : s;
}
exports.normalizeModuleName = normalizeModuleName;
class ModuleInfo {
    relativePath;
    packageInfo;
    isEntry;
    isIncluded;
    functions = new Set;
    node;
    hash;
    constructor(relativePath, packageInfo, isEntry, isIncluded) {
        this.relativePath = relativePath;
        this.packageInfo = packageInfo;
        this.isEntry = isEntry;
        this.isIncluded = isIncluded;
        this.hash = (0, util_1.strHash)(this.toString());
    }
    toString() {
        (0, assert_1.default)(this.packageInfo !== undefined && this.relativePath !== undefined);
        return `${this.packageInfo}:${this.relativePath}`;
    }
    getPath() {
        (0, assert_1.default)(this.packageInfo.dir !== undefined);
        return `${this.packageInfo.dir}${path_1.sep}${this.relativePath}`;
    }
    getOfficialName() {
        if (this.relativePath === this.packageInfo.main)
            return this.packageInfo.name;
        return normalizeModuleName(`${this.packageInfo.name}/${this.relativePath}`);
    }
}
exports.ModuleInfo = ModuleInfo;
class DummyModuleInfo {
    requireName;
    normalizedRequireName;
    constructor(requireName) {
        this.requireName = requireName;
        this.normalizedRequireName = normalizeModuleName(requireName);
    }
    toString() {
        return `${this.normalizedRequireName}[unresolved]`;
    }
    getOfficialName() {
        return this.normalizedRequireName;
    }
}
exports.DummyModuleInfo = DummyModuleInfo;
class FunctionInfo {
    name;
    node;
    moduleInfo;
    functions = new Set;
    get packageInfo() {
        return this.moduleInfo.packageInfo;
    }
    constructor(name, node, moduleInfo) {
        this.name = name;
        this.node = node;
        this.moduleInfo = moduleInfo;
    }
    toString() {
        return `${this.moduleInfo}:${(0, util_1.locationToString)(this.node.loc)}:${this.name ?? "<anonymous>"}`;
    }
}
exports.FunctionInfo = FunctionInfo;
//# sourceMappingURL=infos.js.map