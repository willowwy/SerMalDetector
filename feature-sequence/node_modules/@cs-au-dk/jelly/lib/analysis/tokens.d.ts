import { Function, Node } from "@babel/types";
import { ModuleInfo, PackageInfo } from "./infos";
import { AccessPath } from "./accesspaths";
import { NativeFunctionAnalyzer } from "../natives/nativebuilder";
export declare abstract class Token {
    hash: number | undefined;
    abstract toString(): string;
}
export declare class FunctionToken extends Token {
    readonly fun: Function;
    constructor(fun: Function);
    toString(): string;
}
export type ObjectKind = "Object" | "Array" | "Class" | "Map" | "Set" | "WeakMap" | "WeakSet" | "WeakRef" | "Iterator" | "RegExp" | "Date" | "Promise" | "PromiseResolve" | "PromiseReject" | "Error" | "Prototype";
export declare class AllocationSiteToken extends Token {
    readonly kind: ObjectKind;
    readonly allocSite: Node;
    constructor(kind: ObjectKind, allocSite: Node);
    toString(): string;
}
export declare class ObjectToken extends AllocationSiteToken {
    constructor(allocSite: Node);
    getPackageInfo(): PackageInfo;
}
export declare class PrototypeToken extends AllocationSiteToken {
    constructor(allocSite: Node);
}
export declare class ArrayToken extends AllocationSiteToken {
    constructor(allocSite: Node);
}
export declare class ClassToken extends AllocationSiteToken {
    constructor(allocSite: Node);
}
export declare class NativeObjectToken extends Token {
    readonly name: string;
    readonly moduleInfo?: ModuleInfo | undefined;
    readonly invoke?: NativeFunctionAnalyzer | undefined;
    readonly constr: boolean;
    constructor(name: string, moduleInfo?: ModuleInfo | undefined, invoke?: NativeFunctionAnalyzer | undefined, constr?: boolean);
    toString(): string;
}
export declare class PackageObjectToken extends Token {
    readonly packageInfo: PackageInfo;
    readonly kind: ObjectKind;
    constructor(packageInfo: PackageInfo, kind?: ObjectKind);
    toString(): string;
}
export declare class AccessPathToken extends Token {
    readonly ap: AccessPath;
    constructor(ap: AccessPath);
    toString(): string;
}
