import { DummyModuleInfo, ModuleInfo } from "../analysis/infos";
import { DetectionPattern, Type } from "./patterns";
import { FilePath, LocationJSON } from "../misc/util";
import { Node } from "@babel/types";
import { AccessPath } from "../analysis/accesspaths";
import { FragmentState } from "../analysis/fragmentstate";
import { TypeScriptTypeInferrer } from "../typescript/typeinferrer";
export type Uncertainty = "accessPath" | {
    type: "type";
    exp: Node | undefined;
    kind: "base" | number | "value";
    propNames?: Array<string>;
    typesToMatch: Array<Type>;
} | {
    type: "numArg";
    exp: Node;
    numMinArgs: number | undefined;
    numMaxArgs: number | undefined;
} | "maybePromiseMatch";
export type UncertaintyJSON = "accessPath" | {
    type: "type";
    loc?: LocationJSON;
    kind: "base" | number | "value";
    propNames?: Array<string>;
    typesToMatch: Array<Type>;
} | {
    type: "numArg";
    loc?: LocationJSON;
    numMinArgs: number | undefined;
    numMaxArgs: number | undefined;
} | "maybePromiseMatch";
export type DetectionPatternMatch = {
    exp: Node;
    uncertainties?: Array<Uncertainty>;
};
export declare const confidenceLevels: readonly ["high", "low"];
export type ConfidenceLevel = typeof confidenceLevels[number];
export type AccessPathPatternMatches = Record<ConfidenceLevel, Map<Node, Set<AccessPath>>>;
export type PatternMatchesJSON = {
    files: Array<FilePath>;
    patterns: Array<{
        pattern: string;
        matches: Array<PatternMatchJSON>;
    }>;
};
export type PatternMatchJSON = {
    loc: LocationJSON;
    uncertainties?: Array<{
        text: string;
        uncertainty: UncertaintyJSON;
    }>;
};
export type ModuleFilter = (module: ModuleInfo | DummyModuleInfo) => boolean;
export declare class PatternMatcher {
    private readonly fragmentState;
    private readonly typer;
    private readonly moduleCache;
    private readonly expressionCache;
    private readonly writeExpressionCache;
    private unknownsCache;
    private readonly escapingToExternal;
    constructor(fragmentState: FragmentState, typer?: TypeScriptTypeInferrer);
    private findGlobMatches;
    private findAccessPathPatternMatches;
    private findUnknowns;
    private filterMatches;
    findEscapingAccessPathsToExternal(): void;
    findDetectionPatternMatches(d: DetectionPattern, moduleFilter?: ModuleFilter): Array<DetectionPatternMatch>;
}
export declare function convertPatternMatchesToJSON(patterns: Array<DetectionPattern | undefined>, matcher: PatternMatcher): PatternMatchesJSON;
export declare function generateQuestion(u: Uncertainty): string | undefined;
