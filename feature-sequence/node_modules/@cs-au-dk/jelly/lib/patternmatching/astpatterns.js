"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.followProps = exports.getNumberOfFunctionParams = exports.getValueType = exports.getSimpleType = exports.isDefaultImport = void 0;
const util_1 = require("../misc/util");
const types_1 = require("@babel/types");
const asthelpers_1 = require("../misc/asthelpers");
function isDefaultImport(n) {
    if (!(0, types_1.isImportDeclaration)(n))
        return false;
    for (const spec of n.specifiers)
        if ((0, types_1.isImportDefaultSpecifier)(spec))
            return true;
    return false;
}
exports.isDefaultImport = isDefaultImport;
function getSimpleType(n) {
    if ((0, types_1.isIdentifier)(n) && n.name === "undefined")
        return "undefined";
    if ((0, types_1.isBooleanLiteral)(n) || ((0, types_1.isUnaryExpression)(n) && n.operator === "!"))
        return "boolean";
    if ((0, types_1.isStringLiteral)(n) || (0, types_1.isTemplateLiteral)(n))
        return "string";
    if ((0, types_1.isNumericLiteral)(n))
        return "number";
    if ((0, types_1.isArrayExpression)(n)) {
        if (n.elements.length === 0)
            return "empty-array";
        return "array";
    }
    if ((0, types_1.isObjectExpression)(n))
        return "object";
    if ((0, types_1.isNullLiteral)(n))
        return "null";
    if ((0, types_1.isFunctionExpression)(n) || (0, types_1.isArrowFunctionExpression)(n) || (0, types_1.isObjectMethod)(n))
        return "function";
    return undefined;
}
exports.getSimpleType = getSimpleType;
function getValueType(n) {
    if ((0, types_1.isStringLiteral)(n) || (0, types_1.isNumericLiteral)(n) || (0, types_1.isBooleanLiteral)((n)))
        return n.value;
    return undefined;
}
exports.getValueType = getValueType;
function getNumberOfFunctionParams(n) {
    if (!(0, types_1.isFunctionExpression)(n) && !(0, types_1.isArrowFunctionExpression)(n) && !(0, types_1.isObjectMethod)(n))
        return undefined;
    let plain = true;
    for (const p of n.params)
        if (!(0, types_1.isIdentifier)(p)) {
            plain = false;
            break;
        }
    if (!plain)
        return undefined;
    return n.params.length;
}
exports.getNumberOfFunctionParams = getNumberOfFunctionParams;
function followProps(n, props) {
    if (!props)
        return n;
    let m = n;
    for (const prop of props) {
        if ((0, types_1.isObjectExpression)(m)) {
            let found = false;
            for (const p of m.properties)
                if ((0, types_1.isObjectProperty)(p) || (0, types_1.isObjectMethod)(p)) {
                    const key = (0, asthelpers_1.getKey)(p);
                    if (key !== undefined) {
                        if (key === prop) {
                            found = true;
                            m = (0, types_1.isObjectProperty)(p) ? p.value : p;
                        }
                    }
                    else
                        return util_1.Ternary.Maybe;
                }
                else
                    return util_1.Ternary.Maybe;
            if (!found)
                return util_1.Ternary.False;
        }
        else
            return util_1.Ternary.Maybe;
    }
    return m;
}
exports.followProps = followProps;
//# sourceMappingURL=astpatterns.js.map