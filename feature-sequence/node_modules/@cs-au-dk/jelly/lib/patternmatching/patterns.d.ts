export type Glob = string;
export declare abstract class DetectionPattern {
    readonly ap: AccessPathPattern;
    protected constructor(ap: AccessPathPattern);
    abstract toString(): string;
}
export declare class ImportDetectionPattern extends DetectionPattern {
    readonly onlyDefault: boolean;
    constructor(ap: ImportAccessPathPattern, onlyDefault: boolean);
    toString(): string;
}
export declare class ReadDetectionPattern extends DetectionPattern {
    readonly notInvoked: boolean;
    readonly baseFilter: Array<Type> | undefined;
    constructor(ap: PropertyAccessPathPattern, notInvoked: boolean, baseFilter: Array<Type> | undefined);
    toString(): string;
}
export declare class WriteDetectionPattern extends DetectionPattern {
    readonly valueFilter: Array<Type> | undefined;
    readonly baseFilter: Array<Type> | undefined;
    constructor(ap: PropertyAccessPathPattern, valueFilter: Array<Type> | undefined, baseFilter: Array<Type> | undefined);
    toString(): string;
}
export declare class CallDetectionPattern extends DetectionPattern {
    readonly onlyReturnChanged: boolean;
    readonly onlyWhenUsedAsPromise: boolean;
    readonly onlyNonNewCalls: boolean;
    readonly filters: Array<Filter> | undefined;
    constructor(ap: AccessPathPattern, onlyReturnChanged: boolean, onlyWhenUsedAsPromise: boolean, onlyNonNewCalls: boolean, filters: Array<Filter> | undefined);
    toString(): string;
}
export interface AccessPathPattern {
    toString(): string;
    visitAccessPathPatterns(visitor: (p: AccessPathPattern) => void): void;
}
export declare class ImportAccessPathPattern {
    readonly glob: Glob;
    constructor(glob: Glob);
    toString(): string;
    visitAccessPathPatterns(visitor: (p: AccessPathPattern) => void): void;
}
export declare class PropertyAccessPathPattern {
    readonly base: AccessPathPattern;
    readonly props: Array<string>;
    constructor(base: AccessPathPattern, props: Array<string>);
    toString(): string;
    visitAccessPathPatterns(visitor: (p: AccessPathPattern) => void): void;
}
export declare class CallResultAccessPathPattern {
    readonly fun: AccessPathPattern;
    constructor(fun: AccessPathPattern);
    toString(): string;
    visitAccessPathPatterns(visitor: (p: AccessPathPattern) => void): void;
}
export declare class ComponentAccessPathPattern {
    readonly component: AccessPathPattern;
    constructor(component: AccessPathPattern);
    toString(): string;
    visitAccessPathPatterns(visitor: (p: AccessPathPattern) => void): void;
}
export declare class AbbreviatedPathPattern {
    readonly prefix: AccessPathPattern;
    constructor(prefix: AccessPathPattern);
    toString(): string;
    visitAccessPathPatterns(visitor: (p: AccessPathPattern) => void): void;
}
export declare class DisjunctionAccessPathPattern {
    readonly aps: Array<AccessPathPattern>;
    constructor(aps: Array<AccessPathPattern>);
    toString(): string;
    visitAccessPathPatterns(visitor: (p: AccessPathPattern) => void): void;
}
export declare class ExclusionAccessPathPattern {
    readonly include: AccessPathPattern;
    readonly exclude: AccessPathPattern;
    constructor(include: AccessPathPattern, exclude: AccessPathPattern);
    toString(): string;
    visitAccessPathPatterns(visitor: (p: AccessPathPattern) => void): void;
}
export declare class WildcardAccessPathPattern {
    readonly ap: AccessPathPattern;
    constructor(ap: AccessPathPattern);
    toString(): string;
    visitAccessPathPatterns(visitor: (p: AccessPathPattern) => void): void;
}
export declare class PotentiallyUnknownAccessPathPattern {
    readonly ap: AccessPathPattern;
    constructor(ap: AccessPathPattern);
    toString(): string;
    visitAccessPathPatterns(visitor: (p: AccessPathPattern) => void): void;
}
export declare abstract class Filter {
    abstract toString(): string;
}
export declare class NumArgsCallFilter extends Filter {
    readonly minArgs: number | undefined;
    readonly maxArgs: number | undefined;
    constructor(minArgs: number | undefined, maxArgs: number | undefined);
    toString(): string;
}
export declare class TypeFilter extends Filter {
    readonly selector: FilterSelector;
    readonly types: Array<Type>;
    constructor(selector: FilterSelector, types: Array<Type>);
    toString(): string;
}
export declare class FilterSelector {
    readonly head: number | "base";
    readonly props: Array<string> | undefined;
    constructor(head: number | "base", props: Array<string> | undefined);
    toString(): string;
}
export type SimpleType = "undefined" | "boolean" | "string" | "number" | "array" | "empty-array" | "object" | "null" | "function" | "any";
export type ValueType = string | number | boolean;
export declare class Type {
    readonly simpleType: SimpleType | undefined;
    readonly functionArgs: number | undefined;
    readonly valueType: ValueType | undefined;
    readonly tsType: string | undefined;
    constructor(simpleType: SimpleType | undefined, functionArgs: number | undefined, valueType: ValueType | undefined, tsType: string | undefined);
    toString(): string;
    static makeSimpleType(simpleType: SimpleType, functionArgs?: number | undefined): Type;
    static makeValueType(valueType: ValueType): Type;
    static makeTSType(tsType: string): Type;
}
