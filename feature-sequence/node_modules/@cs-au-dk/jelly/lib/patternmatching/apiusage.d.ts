import { SimpleLocation } from "../misc/util";
import { AccessPathPattern } from "./patterns";
import { Node } from "@babel/types";
import { FragmentState } from "../analysis/fragmentstate";
export type PatternType = "import" | "read" | "write" | "call" | "component";
export type AccessPathPatternToNodes = Record<PatternType, Map<AccessPathPattern, Set<Node>>>;
export type NodeToAccessPathPatterns = Record<PatternType, Map<Node, Set<AccessPathPattern>>>;
export type AccessPathString = string;
export type AccessPathPatternToLocations = Record<PatternType, Record<AccessPathString, Array<SimpleLocation & {
    filename: string;
}>>>;
export declare function getAPIUsage(f: FragmentState): [AccessPathPatternToNodes, NodeToAccessPathPatterns];
export declare function reportAPIUsage(r1: AccessPathPatternToNodes, r2: NodeToAccessPathPatterns): void;
export declare function convertAPIUsageToJSON(r: AccessPathPatternToNodes): AccessPathPatternToLocations;
