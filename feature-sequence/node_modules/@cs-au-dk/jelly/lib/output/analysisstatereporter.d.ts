import { GlobalState } from "../analysis/globalstate";
import { FragmentState } from "../analysis/fragmentstate";
import { FunctionInfo, ModuleInfo } from "../analysis/infos";
import { Node } from "@babel/types";
import AnalysisDiagnostics from "../analysis/diagnostics";
import { CallGraph } from "../typings/callgraph";
export declare class AnalysisStateReporter {
    readonly f: FragmentState;
    readonly a: GlobalState;
    constructor(f: FragmentState);
    saveTokens(outfile: string): void;
    private makeLocStr;
    saveCallGraph(outfile: string, files: Array<string>): void;
    callGraphToJSON(ifiles: Array<string>): CallGraph;
    reportCallGraph(): void;
    reportTokens(): void;
    getZeroCalleeCalls(): Set<Node>;
    reportZeroCalleeCalls(calls: Set<Node>): void;
    getZeroButNativeCalleeCalls(): number;
    getZeroButExternalCalleeCalls(): number;
    getZeroButNativeOrExternalCalleeCalls(): number;
    getOneCalleeCalls(): number;
    getMultipleCalleeCalls(): number;
    getZeroCallerFunctions(): Set<FunctionInfo>;
    reportZeroCallerFunctions(funs: Set<FunctionInfo>): void;
    getEntryModules(): Set<ModuleInfo>;
    getReachableModulesAndFunctions(entries: Set<FunctionInfo | ModuleInfo>): Set<FunctionInfo | ModuleInfo>;
    saveDiagnostics(stats: AnalysisDiagnostics, file: string): void;
    reportReachablePackagesAndModules(): void;
    reportLargestTokenSets(): void;
    reportLargestSubsetEdges(): void;
    reportHigherOrderFunctions(): void;
    reportVariableKinds(): void;
}
