import { FragmentState } from "../analysis/fragmentstate";
import { VulnerabilityResults } from "../patternmatching/vulnerabilitydetector";
export interface VisualizerGraphs {
    graphs: Array<{
        title?: string;
        kind: "callgraph" | "dataflow";
        info?: string;
        elements: Array<{
            data: Node | Edge;
        }>;
        vulnerabilities?: Array<{
            title: string;
        } & Record<"package" | "module" | "function", {
            sources: Array<number>;
            targets: Array<number>;
        }>>;
    }>;
}
export interface Node {
    id: number;
    kind: "package" | "module" | "function" | "variable";
    parent?: number;
    name?: string;
    fullName?: string;
    callWeight?: number;
    tokenWeight?: number;
    callCount?: number;
    tokenCount?: number;
    isEntry?: "true";
    isReachable?: "true";
}
export interface Edge {
    kind: "call" | "require" | "data";
    source: number;
    target: number;
    weight?: number;
}
export declare function exportCallGraphHtml(f: FragmentState, filename: string, vulnerabilities: VulnerabilityResults): void;
export declare function exportDataFlowGraphHtml(f: FragmentState, filename: string): void;
