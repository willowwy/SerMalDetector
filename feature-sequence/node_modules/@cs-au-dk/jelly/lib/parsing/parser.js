"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseAndDesugar = void 0;
const logger_1 = __importDefault(require("../misc/logger"));
const core_1 = require("@babel/core");
const parser_1 = require("@babel/parser");
const extras_1 = require("./extras");
function parseAndDesugar(str, file, f) {
    let originalAst;
    try {
        const options = {
            sourceFilename: file,
            allowImportExportEverywhere: true,
            allowAwaitOutsideFunction: true,
            allowReturnOutsideFunction: true,
            allowSuperOutsideMethod: true,
            allowUndeclaredExports: true,
            errorRecovery: true,
            attachComment: false,
            createParenthesizedExpressions: true,
            sourceType: "unambiguous",
            tokens: true,
            plugins: [
                "typescript",
                "exportDefaultFrom",
                ["decorators", { decoratorsBeforeExport: false }]
            ]
        };
        try {
            originalAst = (0, parser_1.parse)(str, options);
        }
        catch (e) {
            if (logger_1.default.isVerboseEnabled())
                logger_1.default.verbose(`Parse error for ${file}${e instanceof Error ? `: ${e.message}` : ""}, retrying with JSX enabled`);
            options.plugins.push("jsx");
            originalAst = (0, parser_1.parse)(str, options);
        }
    }
    catch (e) {
        f.error(`Unrecoverable parse error for ${file}${e instanceof Error ? `: ${e.message}` : ""}`);
        return null;
    }
    let res;
    const p = Error.prepareStackTrace;
    const cw = console.warn;
    console.warn = function () { };
    try {
        res = (0, core_1.transformFromAstSync)(originalAst, str, {
            plugins: [
                extras_1.replaceTypeScriptImportExportAssignmentsAndAddConstructors,
                ["@babel/plugin-transform-typescript", {
                        onlyRemoveTypeImports: true,
                        allowDeclareFields: true
                    }],
                ["@babel/plugin-transform-template-literals", { loose: true }]
            ],
            cwd: __dirname,
            configFile: false,
            ast: true,
            code: logger_1.default.isDebugEnabled()
        });
    }
    catch (e) {
        f.error(`Babel transformation failed for ${file}${e instanceof Error ? `: ${e.message}` : ""}`);
        return null;
    }
    finally {
        Error.prepareStackTrace = p;
        console.warn = cw;
    }
    if (!res) {
        f.error(`Babel transformation failed silently for ${file}`);
        return null;
    }
    if (res.code)
        if (logger_1.default.isDebugEnabled())
            logger_1.default.debug("Desugared code:\n" + res.code);
    return res.ast;
}
exports.parseAndDesugar = parseAndDesugar;
//# sourceMappingURL=parser.js.map