"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setPatternProperties = exports.patternProperties = exports.setDefaultTrackedModules = exports.resetOptions = exports.resolveBaseDir = exports.setOptions = exports.options = exports.PKG = exports.VERSION = void 0;
const path_1 = require("path");
const logger_1 = __importDefault(require("./misc/logger"));
exports.VERSION = require("../package.json").version;
exports.PKG = "pkg" in process;
exports.options = {
    callgraphHtml: undefined,
    dataflowHtml: undefined,
    callgraphGraphviz: undefined,
    graphvizElideFunctions: false,
    graphvizPackages: undefined,
    dependenciesOnly: false,
    logfile: undefined,
    loglevel: "info",
    loglevelServer: "info",
    tokens: false,
    largest: false,
    soundness: undefined,
    basedir: "",
    callgraph: false,
    callgraphJson: undefined,
    tokensJson: undefined,
    alloc: true,
    widening: false,
    cycleElimination: true,
    modulesOnly: false,
    printProgress: true,
    tty: false,
    dynamic: undefined,
    npmTest: undefined,
    graalHome: undefined,
    skipGraalTest: false,
    ignoreDependencies: false,
    ignoreUnresolved: false,
    excludeEntries: undefined,
    patterns: undefined,
    natives: true,
    warningsUnsupported: false,
    timeout: undefined,
    gc: false,
    typescript: false,
    apiUsage: false,
    apiExported: false,
    findAccessPaths: undefined,
    trackedModules: undefined,
    compareCallgraphs: false,
    reachability: false,
    callgraphImplicit: true,
    callgraphNative: true,
    callgraphRequire: true,
    callgraphExternal: true,
    diagnosticsJson: undefined,
    maxRounds: undefined,
    diagnostics: false,
    patchDynamics: false,
    patchMethodCalls: false,
    readNeighbors: false,
    typescriptLibraryUsage: undefined,
    higherOrderFunctions: false,
    zeros: false,
    variableKinds: false,
    vulnerabilities: undefined,
    externalMatches: false,
    includePackages: undefined,
    excludePackages: undefined,
    assumeInNodeModules: false,
    oldobj: false,
    proto: false,
    objSpread: false,
};
function setOptions(opts) {
    for (const opt of Object.getOwnPropertyNames(exports.options)) {
        const v = opts[opt];
        if (v !== undefined)
            exports.options[opt] = v;
    }
    if (exports.options.apiUsage)
        exports.options.ignoreDependencies = true;
}
exports.setOptions = setOptions;
function resolveBaseDir() {
    exports.options.basedir = (0, path_1.resolve)(process.cwd(), exports.options.basedir);
}
exports.resolveBaseDir = resolveBaseDir;
const original = Object.assign({}, exports.options);
function resetOptions() {
    Object.assign(exports.options, original);
}
exports.resetOptions = resetOptions;
function setDefaultTrackedModules(globs) {
    exports.options.trackedModules ??= globs !== undefined ? Array.from(globs) : exports.options.apiUsage ? ["**"] : undefined;
    if (logger_1.default.isVerboseEnabled() && exports.options.trackedModules) {
        logger_1.default.verbose(`Tracked modules:${exports.options.trackedModules.length > 0 ? "" : " (none)"}`);
        for (const g of exports.options.trackedModules)
            logger_1.default.verbose(`  ${g}`);
    }
}
exports.setDefaultTrackedModules = setDefaultTrackedModules;
exports.patternProperties = undefined;
function setPatternProperties(props) {
    exports.patternProperties = props;
}
exports.setPatternProperties = setPatternProperties;
//# sourceMappingURL=options.js.map