"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.nodejsModels = void 0;
const tokens_1 = require("../analysis/tokens");
exports.nodejsModels = {
    name: "nodejs",
    init: (p) => {
        p.solver.addTokenConstraint(p.moduleSpecialNatives.get("exports"), p.solver.varProducer.objPropVar(p.moduleSpecialNatives.get("module"), "exports"));
    },
    params: [
        {
            name: "require",
            init: ({ solver, moduleInfo }) => {
                const a = solver.globalState;
                const rt = a.canonicalizeToken(new tokens_1.NativeObjectToken("require", moduleInfo));
                solver.addTokenConstraint(a.canonicalizeToken(new tokens_1.NativeObjectToken("require.extensions", moduleInfo)), solver.varProducer.objPropVar(rt, "extensions"));
                return rt;
            },
        },
        {
            name: "module"
        },
        {
            name: "exports"
        }
    ],
    variables: [
        {
            name: "console"
        },
        {
            name: "global",
            init: (p) => {
                return p.globalSpecialNatives.get("globalThis");
            }
        },
        {
            name: "performance"
        },
        {
            name: "process"
        }
    ],
    functions: [
        {
            name: "atob"
        },
        {
            name: "btoa"
        },
        {
            name: "clearImmediate"
        },
        {
            name: "clearInterval"
        },
        {
            name: "clearTimeout"
        },
        {
            name: "queueMicrotask",
            invoke: (p) => {
            }
        },
        {
            name: "setImmediate",
            invoke: (p) => {
            }
        },
        {
            name: "setInterval",
            invoke: (p) => {
            }
        },
        {
            name: "setTimeout",
            invoke: (p) => {
            }
        },
        {
            name: "structuredClone",
            invoke: (p) => {
            }
        },
    ],
    classes: [
        {
            name: "AbortController"
        },
        {
            name: "AbortSignal"
        },
        {
            name: "BroadcastChannel"
        },
        {
            name: "Buffer"
        },
        {
            name: "DOMException"
        },
        {
            name: "Event"
        },
        {
            name: "EventTarget"
        },
        {
            name: "MessageChannel"
        },
        {
            name: "MessageEvent"
        },
        {
            name: "MessagePort"
        },
        {
            name: "TextDecoder"
        },
        {
            name: "TextEncoder"
        },
        {
            name: "URL"
        },
        {
            name: "URLSearchParams"
        }
    ]
};
//# sourceMappingURL=nodejs.js.map