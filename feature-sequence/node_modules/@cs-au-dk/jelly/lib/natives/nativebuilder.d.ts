import { CallExpression, Identifier, NewExpression, OptionalCallExpression } from "@babel/types";
import Solver from "../analysis/solver";
import { NativeObjectToken } from "../analysis/tokens";
import { ModuleInfo } from "../analysis/infos";
import { NodePath } from "@babel/traverse";
import { Operations } from "../analysis/operations";
import { ObjectPropertyVarObj } from "../analysis/constraintvars";
export type CallNodePath = NodePath<CallExpression | OptionalCallExpression | NewExpression>;
export type NativeModelParams = {
    solver: Solver;
    moduleInfo: ModuleInfo;
    moduleSpecialNatives: SpecialNativeObjects;
    globalSpecialNatives: SpecialNativeObjects;
};
export type NativeFunctionParams = NativeModelParams & {
    base: ObjectPropertyVarObj | undefined;
    op: Operations;
    path: CallNodePath;
};
export type NativeFunctionAnalyzer = (p: NativeFunctionParams) => void;
export type NativeModelInitializer = (p: NativeModelParams) => void;
export type NativeVariableInitializer = (p: NativeModelParams) => NativeObjectToken;
export type NativeModel = {
    name: string;
    init?: NativeModelInitializer;
    variables?: Array<NativeVariableModel>;
    params?: Array<NativeVariableModel>;
    functions: Array<NativeFunctionModel>;
    classes: Array<NativeClassModel>;
};
export type NativeVariableModel = {
    name: string;
    init?: NativeVariableInitializer;
};
export type NativeFunctionModel = {
    name: string;
    invoke?: NativeFunctionAnalyzer;
};
export type NativeFieldModel = {
    name: string;
};
export type NativeClassModel = {
    name: string;
    hidden?: boolean;
    invoke?: NativeFunctionAnalyzer;
    fields?: Array<NativeFieldModel>;
    staticMethods?: Array<NativeFunctionModel>;
    methods?: Array<NativeFunctionModel>;
};
export type SpecialNativeObjects = Map<string, NativeObjectToken>;
export declare function buildNatives(solver: Solver, moduleInfo: ModuleInfo): {
    globals: Array<Identifier>;
    globalsHidden: Array<Identifier>;
    moduleSpecialNatives: SpecialNativeObjects;
    globalSpecialNatives: SpecialNativeObjects;
};
