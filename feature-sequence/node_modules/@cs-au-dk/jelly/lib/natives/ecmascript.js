"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ecmascriptModels = exports.isInternalProperty = exports.PROMISE_REJECTED_VALUES = exports.PROMISE_FULFILLED_VALUES = exports.WEAKREF_VALUES = exports.WEAKMAP_VALUES = exports.SET_VALUES = exports.MAP_VALUES = exports.MAP_KEYS = exports.ARRAY_ALL = exports.ARRAY_UNKNOWN = exports.INTERNAL_PROTOTYPE = exports.PROMISE_PROTOTYPE = exports.ASYNC_GENERATOR_PROTOTYPE_NEXT = exports.GENERATOR_PROTOTYPE_NEXT = exports.WEAKREF_PROTOTYPE = exports.WEAKSET_PROTOTYPE = exports.WEAKMAP_PROTOTYPE = exports.SET_PROTOTYPE = exports.MAP_PROTOTYPE = exports.DATE_PROTOTYPE = exports.ERROR_PROTOTYPE = exports.REGEXP_PROTOTYPE = exports.FUNCTION_PROTOTYPE = exports.ARRAY_PROTOTYPE = exports.OBJECT_PROTOTYPE = void 0;
const nativehelpers_1 = require("./nativehelpers");
const tokens_1 = require("../analysis/tokens");
const types_1 = require("@babel/types");
const listeners_1 = require("../analysis/listeners");
const options_1 = require("../options");
exports.OBJECT_PROTOTYPE = "Object.prototype";
exports.ARRAY_PROTOTYPE = "Array.prototype";
exports.FUNCTION_PROTOTYPE = "Function.prototype";
exports.REGEXP_PROTOTYPE = "RegExp.prototype";
exports.ERROR_PROTOTYPE = "Error.prototype";
exports.DATE_PROTOTYPE = "Date.prototype";
exports.MAP_PROTOTYPE = "Map.prototype";
exports.SET_PROTOTYPE = "Set.prototype";
exports.WEAKMAP_PROTOTYPE = "WeakMap.prototype";
exports.WEAKSET_PROTOTYPE = "WeakSet.prototype";
exports.WEAKREF_PROTOTYPE = "WeakRef.prototype";
exports.GENERATOR_PROTOTYPE_NEXT = "Generator.prototype.next";
exports.ASYNC_GENERATOR_PROTOTYPE_NEXT = "AsyncGenerator.prototype.next";
exports.PROMISE_PROTOTYPE = "Promise.prototype";
const INTERNAL_PROTOTYPE = () => options_1.options.proto ? "__proto__" : "%[[Prototype]]";
exports.INTERNAL_PROTOTYPE = INTERNAL_PROTOTYPE;
exports.ARRAY_UNKNOWN = "%ARRAY_UNKNOWN";
exports.ARRAY_ALL = "%ARRAY_ALL";
exports.MAP_KEYS = "%MAP_KEYS";
exports.MAP_VALUES = "%MAP_VALUES";
exports.SET_VALUES = "%SET_VALUES";
exports.WEAKMAP_VALUES = "%WEAKMAP_VALUES";
exports.WEAKREF_VALUES = "%WEAKREF_VALUES";
exports.PROMISE_FULFILLED_VALUES = "%PROMISE_FULFILLED_VALUES";
exports.PROMISE_REJECTED_VALUES = "%PROMISE_REJECTED_VALUES";
function isInternalProperty(prop) {
    return prop === exports.ARRAY_ALL || (prop === (0, exports.INTERNAL_PROTOTYPE)() && !options_1.options.proto);
}
exports.isInternalProperty = isInternalProperty;
exports.ecmascriptModels = {
    name: "ecmascript",
    init: (p) => {
        const thePackageObjectToken = p.solver.globalState.canonicalizeToken(new tokens_1.PackageObjectToken(p.moduleInfo.packageInfo));
        const theArrayPackageObjectToken = p.solver.globalState.canonicalizeToken(new tokens_1.PackageObjectToken(p.moduleInfo.packageInfo, "Array"));
        const theDatePackageObjectToken = p.solver.globalState.canonicalizeToken(new tokens_1.PackageObjectToken(p.moduleInfo.packageInfo, "Date"));
        const theRegExpPackageObjectToken = p.solver.globalState.canonicalizeToken(new tokens_1.PackageObjectToken(p.moduleInfo.packageInfo, "RegExp"));
        const theErrorPackageObjectToken = p.solver.globalState.canonicalizeToken(new tokens_1.PackageObjectToken(p.moduleInfo.packageInfo, "Error"));
        p.solver.addInherits(thePackageObjectToken, p.globalSpecialNatives.get(exports.OBJECT_PROTOTYPE));
        p.solver.addInherits(theArrayPackageObjectToken, p.globalSpecialNatives.get(exports.ARRAY_PROTOTYPE));
        p.solver.addInherits(theDatePackageObjectToken, p.globalSpecialNatives.get(exports.DATE_PROTOTYPE));
        p.solver.addInherits(theRegExpPackageObjectToken, p.globalSpecialNatives.get(exports.REGEXP_PROTOTYPE));
        p.solver.addInherits(theErrorPackageObjectToken, p.globalSpecialNatives.get(exports.ERROR_PROTOTYPE));
        p.solver.addInherits(p.globalSpecialNatives.get(exports.ARRAY_PROTOTYPE), p.globalSpecialNatives.get(exports.OBJECT_PROTOTYPE));
        p.solver.addInherits(p.globalSpecialNatives.get(exports.DATE_PROTOTYPE), p.globalSpecialNatives.get(exports.OBJECT_PROTOTYPE));
        p.solver.addInherits(p.globalSpecialNatives.get(exports.REGEXP_PROTOTYPE), p.globalSpecialNatives.get(exports.OBJECT_PROTOTYPE));
        p.solver.addInherits(p.globalSpecialNatives.get(exports.ERROR_PROTOTYPE), p.globalSpecialNatives.get(exports.OBJECT_PROTOTYPE));
        p.solver.addInherits(p.globalSpecialNatives.get(exports.FUNCTION_PROTOTYPE), p.globalSpecialNatives.get(exports.OBJECT_PROTOTYPE));
        p.solver.addInherits(p.globalSpecialNatives.get(exports.PROMISE_PROTOTYPE), p.globalSpecialNatives.get(exports.OBJECT_PROTOTYPE));
    },
    variables: [
        {
            name: "globalThis"
        },
        {
            name: "Infinity"
        },
        {
            name: "NaN"
        },
        {
            name: "undefined"
        }
    ],
    functions: [
        {
            name: "decodeURI"
        },
        {
            name: "decodeURIComponent"
        },
        {
            name: "encodeURI"
        },
        {
            name: "encodeURIComponent"
        },
        {
            name: "escape"
        },
        {
            name: "eval",
            invoke: (p) => {
                (0, nativehelpers_1.warnNativeUsed)("eval", p);
            }
        },
        {
            name: "isFinite"
        },
        {
            name: "isNaN"
        },
        {
            name: "parseFloat"
        },
        {
            name: "parseInt"
        },
        {
            name: "unescape"
        }
    ],
    classes: [
        {
            name: "AggregateError",
            invoke: (p) => {
                (0, nativehelpers_1.warnNativeUsed)("AggregateError", p);
                (0, nativehelpers_1.returnPackageObject)(p, "Error");
            }
        },
        {
            name: "Array",
            fields: [
                {
                    name: "length"
                }
            ],
            invoke: (p) => {
                const t = (0, nativehelpers_1.newArray)(p);
                for (let i = 0; i < p.path.node.arguments.length; i++)
                    (0, nativehelpers_1.assignParameterToArrayValue)(i, t, p);
                (0, nativehelpers_1.returnToken)(t, p);
            },
            staticMethods: [
                {
                    name: "from",
                    invoke: (p) => {
                        const t = (0, nativehelpers_1.newArray)(p);
                        if (!p.path.node.arguments.every(arg => (0, types_1.isExpression)(arg)))
                            (0, nativehelpers_1.warnNativeUsed)("Array.from", p, "with SpreadElement");
                        else if (p.path.node.arguments.length > 0)
                            (0, nativehelpers_1.assignIteratorValuesToArrayValue)(0, t, p);
                        if (p.path.node.arguments.length > 1) {
                            (0, nativehelpers_1.warnNativeUsed)("Array.from", p, "with map function argument");
                        }
                        (0, nativehelpers_1.returnToken)(t, p);
                    }
                },
                {
                    name: "isArray"
                },
                {
                    name: "of",
                    invoke: (p) => {
                        const t = (0, nativehelpers_1.newArray)(p);
                        for (let i = 0; i < p.path.node.arguments.length; i++)
                            (0, nativehelpers_1.assignParameterToArrayValue)(i, t, p);
                        (0, nativehelpers_1.returnToken)(t, p);
                    }
                }
            ],
            methods: [
                {
                    name: "at",
                    invoke: (p) => {
                        (0, nativehelpers_1.returnArrayValue)(p);
                    }
                },
                {
                    name: "concat",
                    invoke: (p) => {
                        const t = (0, nativehelpers_1.newArray)(p);
                        (0, nativehelpers_1.assignBaseArrayValueToArray)(t, p);
                        for (let i = 0; i < p.path.node.arguments.length; i++) {
                            (0, nativehelpers_1.assignIteratorValuesToArrayValue)(i, t, p);
                            (0, nativehelpers_1.assignParameterToArrayValue)(i, t, p);
                        }
                        (0, nativehelpers_1.returnToken)(t, p);
                    }
                },
                {
                    name: "copyWithin",
                    invoke: (p) => {
                        (0, nativehelpers_1.returnShuffledInplace)(p);
                    }
                },
                {
                    name: "entries",
                    invoke: (p) => {
                        (0, nativehelpers_1.returnIterator)("ArrayEntries", p);
                    }
                },
                {
                    name: "every",
                    invoke: (p) => {
                        (0, nativehelpers_1.invokeCallback)("Array.prototype.every", p);
                    }
                },
                {
                    name: "fill",
                    invoke: (p) => {
                        (0, nativehelpers_1.assignParameterToThisArrayValue)(0, p);
                    }
                },
                {
                    name: "filter",
                    invoke: (p) => {
                        (0, nativehelpers_1.invokeCallback)("Array.prototype.filter", p);
                        (0, nativehelpers_1.returnShuffledArray)(p);
                    }
                },
                {
                    name: "find",
                    invoke: (p) => {
                        (0, nativehelpers_1.invokeCallback)("Array.prototype.find", p);
                        (0, nativehelpers_1.returnArrayValue)(p);
                    }
                },
                {
                    name: "findIndex",
                    invoke: (p) => {
                        (0, nativehelpers_1.invokeCallback)("Array.prototype.findIndex", p);
                    }
                },
                {
                    name: "flat",
                    invoke: (p) => {
                        const t = (0, nativehelpers_1.newArray)(p);
                        (0, nativehelpers_1.assignBaseArrayValueToArray)(t, p);
                        (0, nativehelpers_1.assignBaseArrayArrayValueToArray)(t, p);
                        if (p.path.node.arguments.length > 0)
                            (0, nativehelpers_1.warnNativeUsed)("Array.prototype.flat", p, "with unknown depth");
                        (0, nativehelpers_1.returnToken)(t, p);
                    }
                },
                {
                    name: "flatMap",
                    invoke: (p) => {
                        (0, nativehelpers_1.invokeCallback)("Array.prototype.flatMap", p);
                    }
                },
                {
                    name: "forEach",
                    invoke: (p) => {
                        (0, nativehelpers_1.invokeCallback)("Array.prototype.forEach", p);
                    }
                },
                {
                    name: "group",
                    invoke: (p) => {
                        (0, nativehelpers_1.warnNativeUsed)("Array.prototype.group", p);
                    }
                },
                {
                    name: "groupToMap",
                    invoke: (p) => {
                        (0, nativehelpers_1.warnNativeUsed)("Array.prototype.groupToMap", p);
                    }
                },
                {
                    name: "includes"
                },
                {
                    name: "indexOf"
                },
                {
                    name: "join"
                },
                {
                    name: "keys",
                    invoke: (p) => {
                        (0, nativehelpers_1.returnIterator)("ArrayKeys", p);
                    }
                },
                {
                    name: "lastIndexOf"
                },
                {
                    name: "map",
                    invoke: (p) => {
                        (0, nativehelpers_1.invokeCallback)("Array.prototype.map", p);
                    }
                },
                {
                    name: "pop",
                    invoke: (p) => {
                        (0, nativehelpers_1.returnArrayValue)(p);
                    }
                },
                {
                    name: "push",
                    invoke: (p) => {
                        (0, nativehelpers_1.assignParameterToThisArrayValue)(0, p);
                    }
                },
                {
                    name: "reduce",
                    invoke: (p) => {
                        (0, nativehelpers_1.invokeCallback)("Array.prototype.reduce", p);
                    }
                },
                {
                    name: "reduceRight",
                    invoke: (p) => {
                        (0, nativehelpers_1.invokeCallback)("Array.prototype.reduceRight", p);
                    }
                },
                {
                    name: "reverse"
                },
                {
                    name: "shift",
                    invoke: (p) => {
                        (0, nativehelpers_1.returnArrayValue)(p);
                    }
                },
                {
                    name: "slice",
                    invoke: (p) => {
                        (0, nativehelpers_1.returnShuffledArray)(p);
                    }
                },
                {
                    name: "some",
                    invoke: (p) => {
                        (0, nativehelpers_1.invokeCallback)("Array.prototype.some", p);
                    }
                },
                {
                    name: "sort",
                    invoke: (p) => {
                        (0, nativehelpers_1.invokeCallback)("Array.prototype.sort", p);
                    }
                },
                {
                    name: "splice",
                    invoke: (p) => {
                        const t = (0, nativehelpers_1.returnShuffledArray)(p);
                        if (t)
                            for (let i = 2; i < p.path.node.arguments.length; i++)
                                (0, nativehelpers_1.assignParameterToArrayValue)(i, t, p);
                    }
                },
                {
                    name: "toLocaleString",
                },
                {
                    name: "toString",
                },
                {
                    name: "unshift",
                    invoke: (p) => {
                        (0, nativehelpers_1.assignParameterToThisArrayValue)(0, p);
                    }
                },
                {
                    name: "values",
                    invoke: (p) => {
                        (0, nativehelpers_1.returnIterator)("ArrayValues", p);
                    }
                }
            ]
        },
        {
            name: "ArrayBuffer",
            invoke: (p) => {
                (0, nativehelpers_1.warnNativeUsed)("ArrayBuffer", p);
            },
            staticMethods: [
                {
                    name: "isView"
                }
            ],
            methods: [
                {
                    name: "slice",
                    invoke: (p) => {
                        (0, nativehelpers_1.warnNativeUsed)("ArrayBuffer.prototype.slice", p);
                    }
                }
            ]
        },
        {
            name: "Atomics"
        },
        {
            name: "BigInt",
            invoke: (p) => {
                (0, nativehelpers_1.warnNativeUsed)("BigInt", p);
            },
        },
        {
            name: "BigInt64Array",
            invoke: (p) => {
                (0, nativehelpers_1.warnNativeUsed)("BigInt64Array", p);
            },
        },
        {
            name: "BigUint64Array",
            invoke: (p) => {
                (0, nativehelpers_1.warnNativeUsed)("BigUint64Array", p);
            },
        },
        {
            name: "Boolean",
            methods: [
                {
                    name: "toString"
                },
                {
                    name: "valueOf"
                }
            ]
        },
        {
            name: "DataView",
            invoke: (p) => {
                (0, nativehelpers_1.warnNativeUsed)("DataView", p);
            }
        },
        {
            name: "Date",
            invoke: (p) => {
                if ((0, types_1.isNewExpression)(p.path.node))
                    (0, nativehelpers_1.returnToken)((0, nativehelpers_1.newPackageObject)("Date", p.globalSpecialNatives.get(exports.DATE_PROTOTYPE), p), p);
            },
            staticMethods: [
                {
                    name: "now"
                },
                {
                    name: "parse"
                },
                {
                    name: "UTC"
                }
            ],
            methods: [
                {
                    name: "getDate"
                },
                {
                    name: "getDay"
                },
                {
                    name: "getFullYear"
                },
                {
                    name: "getHours"
                },
                {
                    name: "getMilliseconds"
                },
                {
                    name: "getMinutes"
                },
                {
                    name: "getMonths"
                },
                {
                    name: "getSeconds"
                },
                {
                    name: "getTime"
                },
                {
                    name: "getTimezoneOffset"
                },
                {
                    name: "getUTCDate"
                },
                {
                    name: "getUTCDay"
                },
                {
                    name: "getUTCFullYear"
                },
                {
                    name: "getUTCMilliseconds"
                },
                {
                    name: "getUTCMinutes"
                },
                {
                    name: "getUTCMonth"
                },
                {
                    name: "getUTCSeconds"
                },
                {
                    name: "getYear"
                },
                {
                    name: "setDate"
                },
                {
                    name: "setFullYear"
                },
                {
                    name: "setHours"
                },
                {
                    name: "setMilliseconds"
                },
                {
                    name: "setMinutes"
                },
                {
                    name: "setMonth"
                },
                {
                    name: "setSeconds"
                },
                {
                    name: "setTime"
                },
                {
                    name: "setUTCDate"
                },
                {
                    name: "setUTCFullYear"
                },
                {
                    name: "setUTCHours"
                },
                {
                    name: "setUTCMilliseconds"
                },
                {
                    name: "setUTCMinutes"
                },
                {
                    name: "setUTCMonth"
                },
                {
                    name: "setUTCSeconds"
                },
                {
                    name: "setYear"
                },
                {
                    name: "toDateString"
                },
                {
                    name: "toGMTString"
                },
                {
                    name: "toISOString"
                },
                {
                    name: "toJSON"
                },
                {
                    name: "toLocaleDateString"
                },
                {
                    name: "toLocaleString"
                },
                {
                    name: "toLocaleTimeString"
                },
                {
                    name: "toString"
                },
                {
                    name: "toTimeString"
                },
                {
                    name: "toUTCString"
                },
                {
                    name: "valueOf"
                },
            ]
        },
        {
            name: "Error",
            fields: [
                {
                    name: "cause"
                },
                {
                    name: "message"
                },
                {
                    name: "name"
                }
            ],
            methods: [
                {
                    name: "toString"
                }
            ],
            invoke: (p) => {
                if (p.path.node.arguments.length > 1)
                    (0, nativehelpers_1.warnNativeUsed)("Error", p, "with multiple arguments");
                (0, nativehelpers_1.returnPackageObject)(p, "Error");
            }
        },
        {
            name: "EvalError",
            invoke: (p) => {
                if (p.path.node.arguments.length > 1)
                    (0, nativehelpers_1.warnNativeUsed)("EvalError", p, "with multiple arguments");
                (0, nativehelpers_1.returnPackageObject)(p, "Error");
            }
        },
        {
            name: "FinalizationRegistry",
            invoke: (p) => {
                (0, nativehelpers_1.warnNativeUsed)("FinalizationRegistry", p);
            }
        },
        {
            name: "Float32Array",
            invoke: (p) => {
                (0, nativehelpers_1.warnNativeUsed)("Float32Array", p);
            }
        },
        {
            name: "Float64Array",
            invoke: (p) => {
                (0, nativehelpers_1.warnNativeUsed)("Float64Array", p);
            }
        },
        {
            name: "Function",
            invoke: (p) => {
                (0, nativehelpers_1.warnNativeUsed)("Function", p);
            },
            methods: [
                {
                    name: "apply",
                    invoke: (p) => {
                        (0, nativehelpers_1.invokeCallApply)("Function.prototype.apply", p);
                    }
                },
                {
                    name: "bind",
                    invoke: (p) => {
                        (0, nativehelpers_1.functionBind)(p);
                    }
                },
                {
                    name: "call",
                    invoke: (p) => {
                        (0, nativehelpers_1.invokeCallApply)("Function.prototype.call", p);
                    }
                },
                {
                    name: "toString"
                }
            ]
        },
        {
            name: "Generator",
            hidden: true,
            methods: [
                {
                    name: "next",
                    invoke: (p) => {
                        (0, nativehelpers_1.assignParameterToThisProperty)(0, "value", p);
                        (0, nativehelpers_1.returnThis)(p);
                    }
                },
                {
                    name: "return",
                    invoke: (p) => {
                        (0, nativehelpers_1.returnThis)(p);
                    }
                },
                {
                    name: "throw",
                    invoke: (p) => {
                        if (p.path.node.arguments.length >= 1)
                            (0, nativehelpers_1.widenArgument)(p.path.node.arguments[0], p);
                    }
                },
            ]
        },
        {
            name: "AsyncGenerator",
            hidden: true,
            methods: [
                {
                    name: "next",
                    invoke: (p) => {
                        (0, nativehelpers_1.assignParameterToThisProperty)(0, "value", p);
                        (0, nativehelpers_1.returnThisInPromise)(p);
                    }
                }
            ]
        },
        {
            name: "Int16Array",
            invoke: (p) => {
                (0, nativehelpers_1.warnNativeUsed)("Int16Array", p);
            }
        },
        {
            name: "Int32Array",
            invoke: (p) => {
                (0, nativehelpers_1.warnNativeUsed)("Int32Array", p);
            }
        },
        {
            name: "Int8Array",
            invoke: (p) => {
                (0, nativehelpers_1.warnNativeUsed)("Int8Array", p);
            }
        },
        {
            name: "InternalError",
            invoke: (p) => {
                if (p.path.node.arguments.length > 1)
                    (0, nativehelpers_1.warnNativeUsed)("InternalError", p, "with multiple arguments");
                (0, nativehelpers_1.returnPackageObject)(p, "Error");
            }
        },
        {
            name: "Intl",
            staticMethods: []
        },
        {
            name: "JSON",
            staticMethods: [
                {
                    name: "parse",
                    invoke: (p) => {
                        if (p.path.node.arguments.length > 1)
                            (0, nativehelpers_1.warnNativeUsed)("JSON.parse", p, "with reviver");
                        (0, nativehelpers_1.returnUnknown)(p);
                    }
                },
                {
                    name: "stringify",
                    invoke: (p) => {
                        if (p.path.node.arguments.length > 1)
                            (0, nativehelpers_1.warnNativeUsed)("JSON.stringify", p, "with replacer");
                    }
                },
            ]
        },
        {
            name: "Map",
            invoke: (p) => {
                if ((0, types_1.isNewExpression)(p.path.node)) {
                    const t = (0, nativehelpers_1.newObject)("Map", p.globalSpecialNatives.get(exports.MAP_PROTOTYPE), p);
                    if (p.path.node.arguments.length > 0)
                        (0, nativehelpers_1.assignIteratorMapValuePairs)(0, t, exports.MAP_KEYS, exports.MAP_VALUES, p);
                    (0, nativehelpers_1.returnToken)(t, p);
                }
            },
            methods: [
                {
                    name: "clear"
                },
                {
                    name: "delete"
                },
                {
                    name: "entries",
                    invoke: (p) => {
                        (0, nativehelpers_1.returnIterator)("MapEntries", p);
                    }
                },
                {
                    name: "forEach",
                    invoke: (p) => {
                        (0, nativehelpers_1.invokeCallback)("Map.prototype.forEach", p);
                    }
                },
                {
                    name: "get",
                    invoke: (p) => {
                        (0, nativehelpers_1.returnThisProperty)(exports.MAP_VALUES, p);
                    }
                },
                {
                    name: "has"
                },
                {
                    name: "keys",
                    invoke: (p) => {
                        (0, nativehelpers_1.returnIterator)("MapKeys", p);
                    }
                },
                {
                    name: "set",
                    invoke: (p) => {
                        (0, nativehelpers_1.assignParameterToThisProperty)(0, exports.MAP_KEYS, p);
                        (0, nativehelpers_1.assignParameterToThisProperty)(1, exports.MAP_VALUES, p);
                    }
                },
                {
                    name: "values",
                    invoke: (p) => {
                        (0, nativehelpers_1.returnIterator)("MapValues", p);
                    }
                }
            ]
        },
        {
            name: "Math",
            fields: [
                {
                    name: "E"
                },
                {
                    name: "LN10"
                },
                {
                    name: "LN2"
                },
                {
                    name: "LOG10E"
                },
                {
                    name: "LOG2E"
                },
                {
                    name: "PI"
                },
                {
                    name: "SQRT1_2"
                },
                {
                    name: "SQRT2"
                }
            ],
            staticMethods: [
                {
                    name: "abs"
                },
                {
                    name: "acos"
                },
                {
                    name: "acosh"
                },
                {
                    name: "asin"
                },
                {
                    name: "asinh"
                },
                {
                    name: "atan"
                },
                {
                    name: "atan2"
                },
                {
                    name: "atanh"
                },
                {
                    name: "cbrt"
                },
                {
                    name: "ceil"
                },
                {
                    name: "clz32"
                },
                {
                    name: "cos"
                },
                {
                    name: "cosh"
                },
                {
                    name: "exp"
                },
                {
                    name: "expm1"
                },
                {
                    name: "floor"
                },
                {
                    name: "fround"
                },
                {
                    name: "hypot"
                },
                {
                    name: "imul"
                },
                {
                    name: "log"
                },
                {
                    name: "log10"
                },
                {
                    name: "log1p"
                },
                {
                    name: "log2"
                },
                {
                    name: "max"
                },
                {
                    name: "min"
                },
                {
                    name: "pow"
                },
                {
                    name: "random"
                },
                {
                    name: "round"
                },
                {
                    name: "sign"
                },
                {
                    name: "sin"
                },
                {
                    name: "sinh"
                },
                {
                    name: "sqrt"
                },
                {
                    name: "tan"
                },
                {
                    name: "tanh"
                },
                {
                    name: "trunc"
                }
            ]
        },
        {
            name: "Number",
            fields: [
                {
                    name: "EPSILON"
                },
                {
                    name: "MAX_SAFE_INTEGER"
                },
                {
                    name: "MAX_VALUE"
                },
                {
                    name: "MIN_SAFE_INTEGER"
                },
                {
                    name: "MIN_VALUE"
                },
                {
                    name: "NaN"
                },
                {
                    name: "NEGATIVE_INFINITY"
                },
                {
                    name: "POSITIVE_INFINITY"
                }
            ],
            staticMethods: [
                {
                    name: "isFinite"
                },
                {
                    name: "isInteger"
                },
                {
                    name: "isNaN"
                },
                {
                    name: "isSafeInteger"
                },
                {
                    name: "parseFloat"
                },
                {
                    name: "parseInt"
                }
            ],
            methods: [
                {
                    name: "toExponential"
                },
                {
                    name: "toFixed"
                },
                {
                    name: "toLocaleString"
                },
                {
                    name: "toPrecision"
                },
                {
                    name: "toString"
                },
                {
                    name: "valueOf"
                }
            ]
        },
        {
            name: "Object",
            invoke: (p) => {
                (0, nativehelpers_1.returnToken)(!options_1.options.alloc ? p.op.packageObjectToken :
                    (0, nativehelpers_1.newObject)("Object", p.globalSpecialNatives.get(exports.OBJECT_PROTOTYPE), p), p);
                (0, nativehelpers_1.returnArgument)(p.path.node.arguments[0], p);
            },
            staticMethods: [
                {
                    name: "assign",
                    invoke: (p) => {
                        const args = p.path.node.arguments;
                        if (args.length >= 1) {
                            if (!(0, types_1.isExpression)(args[0]))
                                (0, nativehelpers_1.warnNativeUsed)("Object.assign", p, "with non-expression as target");
                            else {
                                (0, nativehelpers_1.returnArgument)(args[0], p);
                                (0, nativehelpers_1.assignProperties)(args[0], args.slice(1), p);
                            }
                        }
                    }
                },
                {
                    name: "create",
                    invoke: (p) => {
                        const args = p.path.node.arguments;
                        if (args.length === 0)
                            return;
                        let obj;
                        if (options_1.options.alloc) {
                            if (!(0, types_1.isExpression)(args[0])) {
                                (0, nativehelpers_1.warnNativeUsed)("Object.create", p, "with non-expression as prototype");
                                return;
                            }
                            obj = (0, nativehelpers_1.newObject)("Object", args[0], p);
                        }
                        else
                            obj = p.op.packageObjectToken;
                        (0, nativehelpers_1.returnToken)(obj, p);
                        if (args.length >= 2) {
                            if (!(0, types_1.isExpression)(args[1])) {
                                (0, nativehelpers_1.warnNativeUsed)("Object.create", p, "with non-expression as property descriptors");
                                return;
                            }
                            const ivars = (0, nativehelpers_1.prepareDefineProperties)("Object.create", args[1], p);
                            (0, nativehelpers_1.defineProperties)(obj, listeners_1.TokenListener.NATIVE_OBJECT_CREATE, ivars, p);
                        }
                    }
                },
                {
                    name: "defineProperties",
                    invoke: (p) => {
                        const args = p.path.node.arguments;
                        if (args.length < 2)
                            return;
                        if (!(0, types_1.isExpression)(args[0]) || !(0, types_1.isExpression)(args[1])) {
                            (0, nativehelpers_1.warnNativeUsed)("Object.defineProperties", p, "with non-expressions?");
                            return;
                        }
                        const ivars = (0, nativehelpers_1.prepareDefineProperties)("Object.defineProperties", args[1], p);
                        (0, nativehelpers_1.defineProperties)(args[0], listeners_1.TokenListener.NATIVE_OBJECT_DEFINE_PROPERTIES, ivars, p);
                    }
                },
                {
                    name: "defineProperty",
                    invoke: (p) => {
                        const args = p.path.node.arguments;
                        if (args.length < 3)
                            return;
                        if (!(0, types_1.isStringLiteral)(args[1])) {
                            (0, nativehelpers_1.warnNativeUsed)("Object.defineProperty", p, "with dynamic property name");
                            return;
                        }
                        if (!(0, types_1.isExpression)(args[0]) || !(0, types_1.isExpression)(args[2])) {
                            (0, nativehelpers_1.warnNativeUsed)("Object.defineProperty", p, "with non-expressions?");
                            return;
                        }
                        const ivars = (0, nativehelpers_1.prepareDefineProperty)("Object.defineProperty", args[1].value, p.op.expVar(args[2], p.path), p);
                        (0, nativehelpers_1.defineProperties)(args[0], listeners_1.TokenListener.NATIVE_OBJECT_DEFINE_PROPERTY, ivars, p);
                    }
                },
                {
                    name: "entries",
                    invoke: (p) => {
                        (0, nativehelpers_1.warnNativeUsed)("Object.entries", p);
                    }
                },
                {
                    name: "freeze"
                },
                {
                    name: "fromEntries",
                    invoke: (p) => {
                        (0, nativehelpers_1.warnNativeUsed)("Object.fromEntries", p);
                    }
                },
                {
                    name: "getOwnPropertyDescriptor",
                    invoke: (p) => {
                        (0, nativehelpers_1.warnNativeUsed)("Object.getOwnPropertyDescriptor", p);
                    }
                },
                {
                    name: "getOwnPropertyDescriptors",
                    invoke: (p) => {
                        (0, nativehelpers_1.warnNativeUsed)("Object.getOwnPropertyDescriptors", p);
                    }
                },
                {
                    name: "getOwnPropertyNames",
                    invoke: (p) => {
                        (0, nativehelpers_1.returnToken)((0, nativehelpers_1.newArray)(p), p);
                    }
                },
                {
                    name: "getOwnPropertySymbols",
                    invoke: (p) => {
                        (0, nativehelpers_1.returnToken)((0, nativehelpers_1.newArray)(p), p);
                    }
                },
                {
                    name: "getPrototypeOf",
                    invoke: (p) => {
                        (0, nativehelpers_1.returnPrototypeOf)(p);
                    }
                },
                {
                    name: "hasOwn"
                },
                {
                    name: "is"
                },
                {
                    name: "isExtensible"
                },
                {
                    name: "isFrozen"
                },
                {
                    name: "isSealed"
                },
                {
                    name: "keys",
                    invoke: (p) => {
                        (0, nativehelpers_1.returnToken)((0, nativehelpers_1.newArray)(p), p);
                    }
                },
                {
                    name: "preventExtensions"
                },
                {
                    name: "seal"
                },
                {
                    name: "setPrototypeOf",
                    invoke: (p) => {
                        (0, nativehelpers_1.setPrototypeOf)(p);
                    }
                },
                {
                    name: "values",
                    invoke: (p) => {
                        (0, nativehelpers_1.warnNativeUsed)("Object.values", p);
                    }
                },
            ],
            methods: [
                {
                    name: "hasOwnProperty"
                },
                {
                    name: "isPrototypeOf"
                },
                {
                    name: "propertyIsEnumerable"
                },
                {
                    name: "toLocaleString"
                },
                {
                    name: "toString"
                },
                {
                    name: "valueOf"
                }
            ]
        },
        {
            name: "Promise",
            invoke: (p) => {
                if ((0, types_1.isNewExpression)(p.path.node)) {
                    (0, nativehelpers_1.callPromiseExecutor)(p);
                    (0, nativehelpers_1.returnToken)((0, nativehelpers_1.newObject)("Promise", p.globalSpecialNatives.get(exports.PROMISE_PROTOTYPE), p), p);
                }
            },
            staticMethods: [
                {
                    name: "all",
                    invoke: (p) => {
                        (0, nativehelpers_1.returnPromiseIterator)("all", p);
                    }
                },
                {
                    name: "allSettled",
                    invoke: (p) => {
                        (0, nativehelpers_1.returnPromiseIterator)("allSettled", p);
                    }
                },
                {
                    name: "any",
                    invoke: (p) => {
                        (0, nativehelpers_1.returnPromiseIterator)("any", p);
                    }
                },
                {
                    name: "race",
                    invoke: (p) => {
                        (0, nativehelpers_1.returnPromiseIterator)("race", p);
                    }
                },
                {
                    name: "reject",
                    invoke: (p) => {
                        (0, nativehelpers_1.returnResolvedPromise)("reject", p);
                    }
                },
                {
                    name: "resolve",
                    invoke: (p) => {
                        (0, nativehelpers_1.returnResolvedPromise)("resolve", p);
                    }
                },
            ],
            methods: [
                {
                    name: "catch",
                    invoke: (p) => {
                        (0, nativehelpers_1.invokeCallback)("Promise.prototype.catch$onRejected", p, 0, listeners_1.TokenListener.NATIVE_INVOKE_CALLBACK);
                    }
                },
                {
                    name: "finally",
                    invoke: (p) => {
                        (0, nativehelpers_1.invokeCallback)("Promise.prototype.finally$onFinally", p, 0, listeners_1.TokenListener.NATIVE_INVOKE_CALLBACK);
                    }
                },
                {
                    name: "then",
                    invoke: (p) => {
                        (0, nativehelpers_1.invokeCallback)("Promise.prototype.then$onFulfilled", p, 0, listeners_1.TokenListener.NATIVE_INVOKE_CALLBACK);
                        (0, nativehelpers_1.invokeCallback)("Promise.prototype.then$onRejected", p, 1, listeners_1.TokenListener.NATIVE_INVOKE_CALLBACK2);
                    }
                }
            ]
        },
        {
            name: "Proxy",
            invoke: (p) => {
                (0, nativehelpers_1.warnNativeUsed)("Proxy", p);
            },
            staticMethods: [
                {
                    name: "revocable",
                    invoke: (p) => {
                        (0, nativehelpers_1.warnNativeUsed)("Proxy.revocable", p);
                    },
                }
            ]
        },
        {
            name: "RangeError",
            invoke: (p) => {
                if (p.path.node.arguments.length > 1)
                    (0, nativehelpers_1.warnNativeUsed)("RangeError", p, "with multiple arguments");
                (0, nativehelpers_1.returnPackageObject)(p, "Error");
            }
        },
        {
            name: "ReferenceError",
            invoke: (p) => {
                if (p.path.node.arguments.length > 1)
                    (0, nativehelpers_1.warnNativeUsed)("ReferenceError", p, "with multiple arguments");
                (0, nativehelpers_1.returnPackageObject)(p, "Error");
            }
        },
        {
            name: "Reflect",
            staticMethods: [
                {
                    name: "apply",
                    invoke: (p) => {
                        (0, nativehelpers_1.warnNativeUsed)("Reflect.apply", p);
                    }
                },
                {
                    name: "construct",
                    invoke: (p) => {
                        (0, nativehelpers_1.warnNativeUsed)("Reflect.construct", p);
                    }
                },
                {
                    name: "defineProperty",
                    invoke: (p) => {
                        (0, nativehelpers_1.warnNativeUsed)("Reflect.defineProperty", p);
                    }
                },
                {
                    name: "deleteProperty"
                },
                {
                    name: "get",
                    invoke: (p) => {
                        (0, nativehelpers_1.warnNativeUsed)("Reflect.get", p);
                    }
                },
                {
                    name: "getOwnPropertyDescriptor",
                    invoke: (p) => {
                        (0, nativehelpers_1.warnNativeUsed)("Reflect.getOwnPropertyDescriptor", p);
                    }
                },
                {
                    name: "getPrototypeOf",
                    invoke: (p) => {
                        (0, nativehelpers_1.warnNativeUsed)("Reflect.getPrototypeOf", p);
                    }
                },
                {
                    name: "has"
                },
                {
                    name: "isExtensible"
                },
                {
                    name: "ownKeys",
                    invoke: (p) => {
                        (0, nativehelpers_1.warnNativeUsed)("Reflect.ownKeys", p);
                    }
                },
                {
                    name: "preventExtensions"
                },
                {
                    name: "set",
                    invoke: (p) => {
                        (0, nativehelpers_1.warnNativeUsed)("Reflect.set", p);
                    }
                },
                {
                    name: "setPrototypeOf",
                    invoke: (p) => {
                        (0, nativehelpers_1.warnNativeUsed)("Reflect.setPrototypeOf", p);
                    }
                },
            ]
        },
        {
            name: "RegExp",
            invoke: (p) => {
                (0, nativehelpers_1.returnToken)((0, nativehelpers_1.newPackageObject)("RegExp", p.globalSpecialNatives.get(exports.REGEXP_PROTOTYPE), p), p);
            },
            methods: [
                {
                    name: "exec",
                    invoke: (p) => {
                        (0, nativehelpers_1.returnToken)((0, nativehelpers_1.newArray)(p), p);
                    }
                },
                {
                    name: "test"
                },
                {
                    name: "toString"
                }
            ]
        },
        {
            name: "Set",
            invoke: (p) => {
                if ((0, types_1.isNewExpression)(p.path.node)) {
                    const t = (0, nativehelpers_1.newObject)("Set", p.globalSpecialNatives.get(exports.SET_PROTOTYPE), p);
                    if (p.path.node.arguments.length > 0)
                        (0, nativehelpers_1.assignIteratorValuesToProperty)(0, t, exports.SET_VALUES, p);
                    (0, nativehelpers_1.returnToken)(t, p);
                }
            },
            methods: [
                {
                    name: "add",
                    invoke: (p) => {
                        (0, nativehelpers_1.assignParameterToThisProperty)(0, exports.SET_VALUES, p);
                    }
                },
                {
                    name: "clear"
                },
                {
                    name: "delete"
                },
                {
                    name: "entries",
                    invoke: (p) => {
                        (0, nativehelpers_1.returnIterator)("SetEntries", p);
                    }
                },
                {
                    name: "forEach",
                    invoke: (p) => {
                        (0, nativehelpers_1.invokeCallback)("Set.prototype.forEach", p);
                    }
                },
                {
                    name: "has"
                },
                {
                    name: "values",
                    invoke: (p) => {
                        (0, nativehelpers_1.returnIterator)("SetValues", p);
                    }
                }
            ]
        },
        {
            name: "SharedArrayBuffer",
            invoke: (p) => {
                (0, nativehelpers_1.warnNativeUsed)("SharedArrayBuffer", p);
            }
        },
        {
            name: "String",
            staticMethods: [
                {
                    name: "fromCharCode"
                },
                {
                    name: "fromCodePoint"
                },
                {
                    name: "raw"
                }
            ],
            methods: [
                {
                    name: "charAt"
                },
                {
                    name: "charCodeAt"
                },
                {
                    name: "codePointAt"
                },
                {
                    name: "concat"
                },
                {
                    name: "endsWith"
                },
                {
                    name: "includes"
                },
                {
                    name: "indexOf"
                },
                {
                    name: "lastIndexOf"
                },
                {
                    name: "localeCompare"
                },
                {
                    name: "match"
                },
                {
                    name: "matchAll"
                },
                {
                    name: "normalize"
                },
                {
                    name: "padEnd"
                },
                {
                    name: "padStart"
                },
                {
                    name: "repeat"
                },
                {
                    name: "replace"
                },
                {
                    name: "replaceAll"
                },
                {
                    name: "search"
                },
                {
                    name: "slice"
                },
                {
                    name: "split"
                },
                {
                    name: "startsWith"
                },
                {
                    name: "substring"
                },
                {
                    name: "toLocaleLowerCase"
                },
                {
                    name: "toLocaleUpperCase"
                },
                {
                    name: "toLowerCase"
                },
                {
                    name: "toString"
                },
                {
                    name: "toUpperCase"
                },
                {
                    name: "trim"
                },
                {
                    name: "trimEnd"
                },
                {
                    name: "trimStart"
                },
                {
                    name: "valueOf"
                }
            ]
        },
        {
            name: "Symbol",
            invoke: (p) => {
                (0, nativehelpers_1.warnNativeUsed)("Symbol", p);
            }
        },
        {
            name: "SyntaxError",
            invoke: (p) => {
                if (p.path.node.arguments.length > 1)
                    (0, nativehelpers_1.warnNativeUsed)("SyntaxError", p, "with multiple arguments");
                (0, nativehelpers_1.returnPackageObject)(p, "Error");
            }
        },
        {
            name: "TypedArray",
            hidden: true
        },
        {
            name: "TypeError",
            invoke: (p) => {
                if (p.path.node.arguments.length > 1)
                    (0, nativehelpers_1.warnNativeUsed)("TypeError", p, "with multiple arguments");
                (0, nativehelpers_1.returnPackageObject)(p, "Error");
            }
        },
        {
            name: "Uint16Array",
            invoke: (p) => {
                (0, nativehelpers_1.warnNativeUsed)("Uint16Array", p);
            }
        },
        {
            name: "Uint32Array",
            invoke: (p) => {
                (0, nativehelpers_1.warnNativeUsed)("Uint32Array", p);
            }
        },
        {
            name: "Uint8Array",
            invoke: (p) => {
                (0, nativehelpers_1.warnNativeUsed)("Uint8Array", p);
            }
        },
        {
            name: "Uint8ClampedArray",
            invoke: (p) => {
                (0, nativehelpers_1.warnNativeUsed)("Uint8ClampedArray", p);
            }
        },
        {
            name: "URIError",
            invoke: (p) => {
                if (p.path.node.arguments.length > 1)
                    (0, nativehelpers_1.warnNativeUsed)("URIError", p, "with multiple arguments");
                (0, nativehelpers_1.returnPackageObject)(p, "Error");
            }
        },
        {
            name: "WeakMap",
            invoke: (p) => {
                const t = (0, nativehelpers_1.newObject)("WeakMap", p.globalSpecialNatives.get(exports.WEAKMAP_PROTOTYPE), p);
                if (p.path.node.arguments.length > 0)
                    (0, nativehelpers_1.assignIteratorMapValuePairs)(0, t, null, exports.WEAKMAP_VALUES, p);
                (0, nativehelpers_1.returnToken)(t, p);
            },
            methods: [
                {
                    name: "clear"
                },
                {
                    name: "delete"
                },
                {
                    name: "get",
                    invoke: (p) => {
                        (0, nativehelpers_1.returnThisProperty)(exports.WEAKMAP_VALUES, p);
                    }
                },
                {
                    name: "has"
                },
                {
                    name: "set",
                    invoke: (p) => {
                        (0, nativehelpers_1.assignParameterToThisProperty)(1, exports.WEAKMAP_VALUES, p);
                    }
                }
            ]
        },
        {
            name: "WeakRef",
            invoke: (p) => {
                if ((0, types_1.isNewExpression)(p.path.node)) {
                    (0, nativehelpers_1.assignParameterToThisProperty)(0, exports.WEAKREF_VALUES, p);
                    (0, nativehelpers_1.returnToken)((0, nativehelpers_1.newObject)("WeakRef", p.globalSpecialNatives.get(exports.WEAKREF_PROTOTYPE), p), p);
                }
            },
            methods: [
                {
                    name: "deref",
                    invoke: (p) => {
                        (0, nativehelpers_1.returnThisProperty)(exports.WEAKREF_VALUES, p);
                    }
                }
            ]
        },
        {
            name: "WeakSet",
            invoke: (p) => {
                if ((0, types_1.isNewExpression)(p.path.node))
                    (0, nativehelpers_1.returnToken)((0, nativehelpers_1.newObject)("WeakSet", p.globalSpecialNatives.get(exports.WEAKSET_PROTOTYPE), p), p);
            },
            methods: [
                {
                    name: "add"
                },
                {
                    name: "delete"
                },
                {
                    name: "has"
                }
            ]
        },
        {
            name: "WebAssembly",
            staticMethods: [
                {
                    name: "compile"
                },
                {
                    name: "compileStreaming"
                },
                {
                    name: "instantiate"
                },
                {
                    name: "instantiateStreaming"
                },
                {
                    name: "validate"
                }
            ]
        }
    ]
};
//# sourceMappingURL=ecmascript.js.map