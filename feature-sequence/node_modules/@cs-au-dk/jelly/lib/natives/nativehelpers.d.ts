import { CallExpression, Expression } from "@babel/types";
import { AccessPathToken, AllocationSiteToken, ArrayToken, FunctionToken, NativeObjectToken, ObjectKind, PackageObjectToken, Token } from "../analysis/tokens";
import { Node } from "@babel/core";
import { NativeFunctionParams } from "./nativebuilder";
import { TokenListener } from "../analysis/listeners";
import { NodePath } from "@babel/traverse";
import { Operations } from "../analysis/operations";
import { AccessorType, ConstraintVar, IntermediateVar, ObjectPropertyVarObj } from "../analysis/constraintvars";
export declare function assignParameterToThisProperty(param: number, prop: string, p: NativeFunctionParams): void;
export declare function assignParameterToThisArrayValue(param: number, p: NativeFunctionParams): void;
export declare function assignParameterToArrayValue(param: number, t: ArrayToken, p: NativeFunctionParams): void;
export declare function returnThisProperty(prop: string, p: NativeFunctionParams): void;
export declare function returnThis(p: NativeFunctionParams): void;
export declare function returnThisInPromise(p: NativeFunctionParams): void;
export declare function returnArrayValue(p: NativeFunctionParams): void;
export declare function returnShuffledArray(p: NativeFunctionParams): ArrayToken | undefined;
export declare function returnShuffledInplace(p: NativeFunctionParams): void;
export declare function warnNativeUsed(name: string, p: NativeFunctionParams, extra?: string): void;
export declare function returnPackageObject(p: NativeFunctionParams, kind?: ObjectKind): void;
export declare function widenArgument(arg: Node, p: NativeFunctionParams): void;
export declare function returnArgument(arg: Node, p: NativeFunctionParams): void;
export declare function newObject(kind: ObjectKind, proto: NativeObjectToken | PackageObjectToken | Expression, p: NativeFunctionParams): AllocationSiteToken | PackageObjectToken;
export declare function newPackageObject(kind: ObjectKind, proto: NativeObjectToken | PackageObjectToken, p: NativeFunctionParams): PackageObjectToken;
export declare function newArray(p: NativeFunctionParams): ArrayToken;
export declare function returnToken(t: Token, p: NativeFunctionParams): void;
export declare function returnUnknown(p: NativeFunctionParams): void;
type IteratorKind = "ArrayKeys" | "ArrayValues" | "ArrayEntries" | "SetValues" | "SetEntries" | "MapKeys" | "MapValues" | "MapEntries";
export declare function returnIterator(kind: IteratorKind, p: NativeFunctionParams): void;
type CallbackKind = "Array.prototype.forEach" | "Array.prototype.every" | "Array.prototype.filter" | "Array.prototype.find" | "Array.prototype.findIndex" | "Array.prototype.flatMap" | "Array.prototype.map" | "Array.prototype.reduce" | "Array.prototype.reduceRight" | "Array.prototype.some" | "Array.prototype.sort" | "Map.prototype.forEach" | "Set.prototype.forEach" | "Promise.prototype.then$onFulfilled" | "Promise.prototype.then$onRejected" | "Promise.prototype.catch$onRejected" | "Promise.prototype.finally$onFinally";
export declare function invokeCallback(kind: CallbackKind, p: NativeFunctionParams, arg?: number, key?: TokenListener): void;
export declare function invokeCallbackBound(kind: CallbackKind, p: NativeFunctionParams, bt: AllocationSiteToken | PackageObjectToken, ft: FunctionToken | AccessPathToken): void;
type CallApplyKind = "Function.prototype.call" | "Function.prototype.apply";
export declare function invokeCallApply(kind: CallApplyKind, p: NativeFunctionParams): void;
export declare function invokeCallApplyBound(kind: CallApplyKind, p: NativeFunctionParams, ft: FunctionToken | NativeObjectToken): void;
export declare function functionBind(p: NativeFunctionParams): void;
export declare function assignIteratorValuesToProperty(param: number, t: AllocationSiteToken | PackageObjectToken, prop: string, p: NativeFunctionParams): void;
export declare function assignIteratorValuesToArrayValue(param: number, t: ArrayToken, p: NativeFunctionParams): void;
export declare function assignIteratorMapValuePairs(param: number, t: AllocationSiteToken | PackageObjectToken, keys: string | null, values: string, p: NativeFunctionParams): void;
export declare function assignBaseArrayValueToArray(t: ArrayToken, p: NativeFunctionParams): void;
export declare function assignBaseArrayArrayValueToArray(t: ArrayToken, p: NativeFunctionParams): void;
export declare function callPromiseExecutor(p: NativeFunctionParams): void;
export declare function callPromiseResolve(t: AllocationSiteToken, args: CallExpression["arguments"], path: NodePath, op: Operations): void;
export declare function returnResolvedPromise(kind: "resolve" | "reject", p: NativeFunctionParams): void;
export declare function returnPromiseIterator(kind: "all" | "allSettled" | "any" | "race", p: NativeFunctionParams): void;
export declare function returnPrototypeOf(p: NativeFunctionParams): void;
export declare function setPrototypeOf(p: NativeFunctionParams): void;
export declare function assignProperties(target: Expression, sources: Array<Node>, p: NativeFunctionParams): void;
type PreparedDefineProperty = {
    prop: string;
    ac: AccessorType;
    ivar: IntermediateVar;
};
export declare function prepareDefineProperty(name: "Object.defineProperty" | "Object.defineProperties" | "Object.create", prop: string, descriptor: ConstraintVar | undefined, p: NativeFunctionParams): Array<PreparedDefineProperty>;
export declare function prepareDefineProperties(name: "Object.defineProperties" | "Object.create", props: Expression, p: NativeFunctionParams): Array<PreparedDefineProperty>;
export declare function defineProperties(obj: Expression | ObjectPropertyVarObj, key: TokenListener, ivars: Array<PreparedDefineProperty>, p: NativeFunctionParams): void;
export {};
