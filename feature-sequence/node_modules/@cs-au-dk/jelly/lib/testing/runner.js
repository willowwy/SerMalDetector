"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importStar(require("fs"));
const options_1 = require("../options");
const analyzer_1 = require("../analysis/analyzer");
const path_1 = require("path");
const files_1 = require("../misc/files");
const logger_1 = __importStar(require("../misc/logger"));
const analysisstatereporter_1 = require("../output/analysisstatereporter");
const solver_1 = __importDefault(require("../analysis/solver"));
const jsonFile = process.argv[2];
const outFile = process.argv[3];
const timeout = Number(process.argv[4]);
const ignoreDependencies = process.argv[5] === "ignoreDependencies";
if (!jsonFile || !outFile || !timeout) {
    console.error("Error: Missing argument");
    process.exit(-1);
}
(async function () {
    const f = JSON.parse((0, fs_1.readFileSync)(jsonFile, { encoding: "utf8" }));
    let count = 0;
    const packages = Object.keys(f.dependencies);
    const results = {};
    for (const d of packages) {
        (0, logger_1.setLogLevel)("info");
        logger_1.default.info(`Analyzing package ${d} (${++count}/${packages.length})`);
        options_1.options.basedir = (0, path_1.dirname)(jsonFile);
        options_1.options.ignoreDependencies = ignoreDependencies;
        options_1.options.tty = false;
        options_1.options.warningsUnsupported = false;
        options_1.options.timeout = timeout;
        (0, logger_1.setLogLevel)("warn");
        const solver = new solver_1.default();
        await (0, analyzer_1.analyzeFiles)((0, files_1.expand)([`${options_1.options.basedir}/node_modules/${d}`]), solver);
        results[d] = solver.diagnostics;
        (0, logger_1.setLogLevel)("verbose");
        new analysisstatereporter_1.AnalysisStateReporter(solver.fragmentState).reportLargestTokenSets();
    }
    const fd = fs_1.default.openSync(outFile, "w");
    (0, files_1.writeStreamedStringify)(results, fd, undefined, 2);
    fs_1.default.closeSync(fd);
})();
//# sourceMappingURL=runner.js.map