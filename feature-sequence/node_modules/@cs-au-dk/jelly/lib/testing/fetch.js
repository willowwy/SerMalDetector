"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const child_process_1 = require("child_process");
const reposFile = process.argv[2];
const installDir = process.argv[3];
if (!reposFile || !installDir) {
    console.error("Error: Missing argument");
    process.exit(-1);
}
fs_1.default.mkdirSync(installDir, { recursive: true });
console.log(`Reading ${reposFile}`);
const j = JSON.parse(fs_1.default.readFileSync(reposFile, "utf8"));
let i = 0;
for (const entry of j) {
    try {
        if (!entry.github_repo || !entry.branch) {
            console.error(`github_repo or branch not found in ${reposFile}`);
            process.exit(-1);
        }
        console.log(`Installing (${++i}/${j.length}) ${entry.github_repo} in ${installDir}`);
        (0, child_process_1.execSync)(`git clone --depth 1 --branch ${entry.branch} https://github.com/${entry.github_repo} ${entry.github_repo} -q`, { cwd: installDir, encoding: "utf8", stdio: "inherit" });
        (0, child_process_1.execSync)(`npm install --ignore-scripts`, { cwd: `${installDir}/${entry.github_repo}`, encoding: "utf8", stdio: "inherit" });
    }
    catch (e) {
        console.error(e);
    }
}
//# sourceMappingURL=fetch.js.map