"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getComponents = exports.nuutila = void 0;
const assert_1 = __importDefault(require("assert"));
const util_1 = require("./util");
function nuutila(nodes, succ) {
    const d = new Map;
    const r = new Map;
    const c = new Set;
    const s = [];
    const t = [];
    let i = 1;
    for (const v of nodes)
        if (!d.has(v))
            visit(v);
    return [t, r];
    function visit(v) {
        d.set(v, i++);
        r.set(v, v);
        const ws = succ(v);
        if (ws)
            for (const w of ws) {
                if (!d.has(w))
                    visit(w);
                if (!c.has(w)) {
                    const rv = r.get(v);
                    (0, assert_1.default)(rv);
                    const rw = r.get(w);
                    (0, assert_1.default)(rw);
                    const drv = d.get(rv);
                    (0, assert_1.default)(drv);
                    const drw = d.get(rw);
                    (0, assert_1.default)(drw);
                    r.set(v, drv < drw ? rv : rw);
                }
            }
        if (r.get(v) === v) {
            c.add(v);
            while (s.length > 0) {
                const w = s[s.length - 1];
                const dv = d.get(v);
                (0, assert_1.default)(dv);
                const dw = d.get(w);
                (0, assert_1.default)(dw);
                if (dw <= dv)
                    break;
                s.pop();
                c.add(w);
                r.set(w, v);
            }
            t.push(v);
        }
        else
            s.push(v);
    }
}
exports.nuutila = nuutila;
function getComponents([t, r]) {
    const m = new Map;
    for (const [v, w] of r.entries())
        (0, util_1.getOrSet)(m, w, () => []).push(v);
    const sccs = [];
    for (const v of t) {
        const c = m.get(v);
        (0, assert_1.default)(c);
        sccs.push(c);
    }
    return sccs;
}
exports.getComponents = getComponents;
//# sourceMappingURL=scc.js.map