"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMemoryLimit = exports.getMemoryUsage = void 0;
const options_1 = require("../options");
const assert_1 = __importDefault(require("assert"));
const v8 = __importStar(require("v8"));
const logger_1 = __importStar(require("./logger"));
function getMemoryUsage() {
    if (options_1.options.gc) {
        (0, assert_1.default)(typeof gc === "function");
        (0, logger_1.writeStdOutIfActive)("Garbage collecting...");
        gc();
    }
    const res = Math.ceil(process.memoryUsage().heapUsed / 1048576);
    if ((options_1.options.gc && logger_1.default.isInfoEnabled()) || logger_1.default.isVerboseEnabled())
        logger_1.default.info(`Memory usage: ${res}MB`);
    return res;
}
exports.getMemoryUsage = getMemoryUsage;
function getMemoryLimit() {
    return Math.ceil(v8.getHeapStatistics().heap_size_limit / 1048576);
}
exports.getMemoryLimit = getMemoryLimit;
//# sourceMappingURL=memory.js.map