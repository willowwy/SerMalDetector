"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.writeStdOutIfActive = exports.writeStdOut = exports.logToFile = exports.setLogLevel = exports.isTTY = void 0;
const os_1 = require("os");
const winston_1 = __importDefault(require("winston"));
const options_1 = require("../options");
const RED = "\x1b[31m";
const YELLOW = "\x1b[33m";
const DEFAULT = "\x1b[39m";
const GREEN = "\x1b[32m";
const CYAN = "\x1b[36m";
const WHITE = "\x1b[97m";
const RESET = "\x1b[0m";
const CLEAR = "\u001b[0K";
const colors = {
    error: RED,
    warn: YELLOW,
    info: DEFAULT,
    verbose: GREEN,
    debug: CYAN,
};
exports.isTTY = process.stdout.isTTY;
const logger = winston_1.default.createLogger({
    level: "info",
    format: winston_1.default.format.printf(({ level, message }) => exports.isTTY && options_1.options?.tty && !options_1.options.logfile ? colors[level] + message + RESET + CLEAR : message),
    transports: new winston_1.default.transports.Console({
        stderrLevels: []
    })
});
exports.default = logger;
function setLogLevel(level) {
    logger.level = options_1.options.loglevel = level;
}
exports.setLogLevel = setLogLevel;
function logToFile(file) {
    const t = new winston_1.default.transports.File({
        filename: file ?? `${(0, os_1.tmpdir)()}/jelly-${process.pid}.log`
    });
    logger.remove(logger.transports[0]);
    logger.add(t);
    return t;
}
exports.logToFile = logToFile;
function writeStdOut(s) {
    process.stdout.write(WHITE + s.substring(0, process.stdout.columns) + RESET + CLEAR + "\r");
}
exports.writeStdOut = writeStdOut;
function writeStdOutIfActive(s) {
    if (options_1.options.printProgress && options_1.options.tty && !options_1.options.logfile && exports.isTTY && logger.level === "info")
        writeStdOut(s);
}
exports.writeStdOutIfActive = writeStdOutIfActive;
//# sourceMappingURL=logger.js.map