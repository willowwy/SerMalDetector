import { Node, SourceLocation } from "@babel/types";
import { ModuleInfo } from "../analysis/infos";
import { CallGraph } from "../typings/callgraph";
export type SimpleLocation = {
    start: {
        line: number;
        column: number;
    };
    end: {
        line: number;
        column: number;
    };
};
export type Location = SimpleLocation & {
    module?: ModuleInfo;
    native?: string;
    nodeIndex?: number;
    unbound?: boolean;
};
export type LocationJSON = string;
export type FilePath = string;
export declare enum Ternary {
    True = 1,
    False = 0,
    Maybe = -1
}
export declare function ternaryOr(t1: Ternary, t2: Ternary): Ternary;
export declare function ternaryToString(t: Ternary): string;
export declare function nodeToString(n: Node): string;
export declare function locationToString(loc: Location | null | undefined, withFilename?: boolean, withEnd?: boolean, useModuleName?: boolean): string;
export declare function locationToStringWithFile(loc: Location | null | undefined, useModuleName?: boolean): string;
export declare function locationToStringWithFileAndEnd(loc: Location | null | undefined, useModuleName?: boolean): string;
export declare function locationContains(loc: Location | null | undefined, file: string, line: number): boolean;
export declare function locationIn(loc1: SimpleLocation, loc2: SimpleLocation | undefined | null): boolean;
export declare function mapGetMap<K1, K2, V>(m: Map<K1, Map<K2, V>>, k: K1): Map<K2, V>;
export declare function mapGetSet<K, V>(m: Map<K, Set<V>>, k: K): Set<V>;
export declare function mapGetArray<K, V>(m: Map<K, Array<V>>, k: K): Array<V>;
export declare function mapGetArray<K extends object, V>(m: WeakMap<K, Array<V>>, k: K): Array<V>;
export declare function getOrSet<K, V>(m: Map<K, V>, k: K, v: () => V): V;
export declare function getOrSet<K extends object, V>(m: WeakMap<K, V>, k: K, v: () => V): V;
export declare function mapMapSize<K1, K2, V>(m: Map<K1, Map<K2, V>>): number;
export declare function mapSetAddAll<K, V>(from: Map<K, Set<V>>, to: Map<K, Set<V>>): void;
export declare function mapArrayPushAll<K, V>(from: Map<K, Array<V>>, to: Map<K, Array<V>>): void;
export declare function mapMapSetAll<K1, K2, V>(from: Map<K1, Map<K2, V>>, to: Map<K1, Map<K2, V>>): void;
export declare function mapMapMapSetAll<K1, K2, K3, V>(from: Map<K1, Map<K2, Map<K3, V>>>, to: Map<K1, Map<K2, Map<K3, V>>>): void;
export declare function addAll<T>(from: Iterable<T> | Set<T> | Array<T> | undefined, to: Set<T>): number;
export declare function setAll<K, V>(from: Map<K, V>, to: Map<K, V>): void;
export declare function mapArrayAdd<K, V>(k: K, v: V, m: Map<K, Array<V>>): void;
export declare function mapArrayAdd<K extends object, V>(k: K, v: V, m: WeakMap<K, Array<V>>): void;
export declare function deleteAll<T>(xs: Iterable<T>, s: Set<T>): void;
export declare function deleteMapSetAll<K, V>(m: Map<K, Set<V>>, k: K, vs: Set<V>): void;
export declare function addMapHybridSet<K, V>(k: K, v: V, to: Map<K, V | Set<V>>): boolean;
export declare function addAllMapHybridSet<K, V>(from: Map<K, V | Set<V>>, to: Map<K, V | Set<V>>): void;
export declare function getMapHybridSetSize<K, V>(m: Map<K, V | Set<V>>): number;
export declare function strHash(s: string): number;
export declare function isArrayIndex(prop: string): boolean;
export declare function percent(x: number): string;
export declare class SourceLocationsToJSON {
    private readonly fileIndex;
    private readonly files;
    constructor(files: Array<string>);
    private getFileIndex;
    makeLocString(loc: (SourceLocation & {
        filename?: string;
    }) | Location | null | undefined): LocationJSON;
    parseLocationJSON(loc: LocationJSON): {
        loc?: SimpleLocation;
        fileIndex: number;
        file: string;
    };
}
export declare function mapCallsToFunctions(cg: CallGraph): Map<number, number>;
