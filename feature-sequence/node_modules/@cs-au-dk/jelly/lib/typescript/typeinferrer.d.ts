import * as ts from 'typescript';
import { FilePath, Location, LocationJSON, SimpleLocation } from "../misc/util";
import Timer from "../misc/timer";
import { Type } from "../patternmatching/patterns";
export type LibraryUsage = Map<string, Array<[SimpleLocation & {
    filename: string;
}, ts.Type]>>;
export type LibraryUsageJSON = {
    files: Array<FilePath>;
    packages: Record<string, Array<[LocationJSON, string]>>;
};
export declare class TypeScriptTypeInferrer {
    readonly program: ts.Program;
    readonly checker: ts.TypeChecker;
    readonly files: Map<string, ts.SourceFile>;
    readonly timer: Timer;
    constructor(files: Array<string>);
    private createProgram;
    getTypeAtTSNode(node: ts.Node, loc: SimpleLocation | string): ts.Type | undefined;
    getType(loc: Location | SimpleLocation): ts.Type | undefined;
    convertType(type: ts.Type | undefined): Type | undefined;
    getLibraryUsage(): LibraryUsage;
    libraryUsageToJSON(u: LibraryUsage): LibraryUsageJSON;
}
