import { options } from "../options";
import AnalysisDiagnostics from "../analysis/diagnostics";
import { AccessPathPatternToLocations } from "../patternmatching/apiusage";
import { PatternMatchesJSON } from "../patternmatching/patternmatcher";
import { SemanticPatch } from "./tapir";
import { CallGraph } from "./callgraph";
import { LibraryUsageJSON } from "../typescript/typeinferrer";
export interface Message {
    seq?: number;
    type: "request" | "response";
}
export interface Request extends Message {
    type: "request";
    command: RequestCommands;
    arguments?: any;
}
export interface Response extends Message {
    type: "response";
    seq: number;
    command?: RequestCommands;
    request_seq?: number;
    success: boolean;
    message?: string;
    body?: any;
}
export interface SuccessResponse extends Response {
    success: true;
}
export type RequestCommands = "options" | "expandpaths" | "files" | "analyze" | "abort" | "diagnostics" | "callgraph" | "htmlcallgraph" | "htmldataflowgraph" | "reachablepackages" | "typescript" | "tslibraryusage" | "apiusage" | "patternfiles" | "patterns" | "patternmatch" | "clear" | "reset" | "exit";
export interface OptionsRequest extends Request {
    command: "options";
    arguments: Partial<typeof options>;
}
export interface ExpandPathsRequest extends Request {
    command: "expandpaths";
    arguments: Array<string> | string;
}
export interface ExpandPathsResponse extends SuccessResponse {
    body: Array<string>;
}
export interface FilesRequest extends Request {
    command: "files";
    arguments: Array<string>;
}
export interface AnalyzeRequest extends Request {
    command: "analyze";
}
export interface AbortRequest extends Request {
    command: "abort";
}
export interface ClearRequest extends Request {
    command: "clear";
}
export interface TypeScriptRequest extends Request {
    command: "typescript";
}
export interface DiagnosticsRequest extends Request {
    command: "diagnostics";
}
export interface DiagnosticsResponse extends SuccessResponse {
    body: AnalysisDiagnostics;
}
export interface ApiUsageRequest extends Request {
    command: "apiusage";
}
export interface ApiUsageResponse extends SuccessResponse {
    body: AccessPathPatternToLocations;
}
export interface PatternFilesRequest extends Request {
    command: "patternfiles";
    arguments: Array<string>;
}
export interface PatternsRequest extends Request {
    command: "patterns";
    arguments: Array<SemanticPatch>;
}
export interface PatternMatchRequest extends Request {
    command: "patternmatch";
}
export interface PatternMatchResponse extends SuccessResponse {
    body: PatternMatchesJSON;
}
export interface CallGraphRequest extends Request {
    command: "callgraph";
}
export interface CallGraphResponse extends SuccessResponse {
    body: CallGraph;
}
export interface HTMLCallGraphRequest extends Request {
    command: "htmlcallgraph";
}
export interface HTMLDataFlowGraphRequest extends Request {
    command: "htmldataflowgraph";
}
export interface TSLibraryUsageRequest extends Request {
    command: "tslibraryusage";
}
export interface TSLibraryUsageResponse extends SuccessResponse {
    body: LibraryUsageJSON;
}
export interface ReachablePackagesRequest extends Request {
    command: "reachablepackages";
}
export interface ReachablePackagesResponse extends SuccessResponse {
    body: Array<{
        name: string;
        version?: string;
    }>;
}
export interface ResetRequest extends Request {
    command: "reset";
}
